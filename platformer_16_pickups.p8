pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- platformer
-- lesson 16: pickups
-- by matthew dimatteo

-- tab 0: game loop
-- tab 1: player functions
-- tab 2: pickup functions
-- tab 3: object collision
-- tab 4: map collision

-- runs once at start
function _init()

	-- physics
	fric = 0.85 -- friction
	grav = 0.3 -- gravity
	
	-- map tile flags
	ground=0
	platform=1

	-- collect pickups +10
	score = 0

	-- object initialization
	make_plyr() -- tab 1
	pickups_setup()

end -- end function _init()

-- runs 30x per second
function _update()
	move_plyr()
	foreach(pickups,update_pickup)
end -- end function _update()

-- runs 30x per second
function _draw()
	cls() -- clear screen 
	map() -- draw the map

	-- draw pickups 
	foreach(pickups,draw_pickup)

	-- print score
	print("score: "..score,2,2,7)

	-- draw plyr
	spr(plyr.n,plyr.x,plyr.y,1,1,plyr.flip)
end -- end function _draw()
-->8
-- player functions

-- make_plyr()
function make_plyr()

	plyr={} -- table for plyr obj
	plyr.n=1 -- sprite number
	
	-- x,y coordinates
	plyr.x=1*8 -- x=8 pixels
	plyr.y=11*8 -- y=88 pixels
	
	-- width and height in pixels
	-- needed for map collision
	plyr.w=8
	plyr.h=8
	
	-- base speed
	plyr.xspd=0.5 -- x speed
	plyr.yspd=4 -- y speed
	
	-- active speed
	plyr.dx=0 -- change in x
	plyr.dy=0 -- change in y
	
	-- player state
	plyr.landed=false
	plyr.facing="right"
	plyr.flip=false
	
end -- end make_plyr()

-- move plyr
function move_plyr()

	-- apply friction so the plyr
	-- eventually stops moving
	plyr.dx *= fric
	
	-- apply gravity so the plyr
	-- does not float endlessly
	plyr.dy += grav
	
	-- move left
	if btn(⬅️) then
		plyr.dx -= plyr.xspd
	end -- end if btn(⬅️)
	
	-- move right
	if btn(➡️) then
		plyr.dx += plyr.xspd
	end -- end if btn(⬅️)
	
	-- jump
	if btnp(⬆️) or btnp(❎) then
		if plyr.landed then
			plyr.dy -= plyr.yspd
			plyr.landed=false
		end -- end if plyr.landed
	end -- end if btnp(⬆️/❎)
	
	-- test collision below
	if plyr.dy > 0 then
	
		-- stop falling when a solid
		-- tile is below the player
		if mcollide(plyr,"down",0)
	 	then
			plyr.dy = 0	
			plyr.landed=true

			-- correct y position to
			-- avoid getting stuck in
			-- the floor
			plyr.y=flr((plyr.y+1)/8)*8
		end -- end if mcollide down
	
	-- test collision above
	elseif plyr.dy < 0 then
		if mcollide(plyr,"up",0) then
			
		end -- end if mcollide up
	end -- end if plyr.dy </> 0
	
	-- test collision on left
	if plyr.dx < 0 then
	
		-- prevent movement through
		-- walls to the left
		if mcollide(plyr,"left",0)
		then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=ceil((plyr.x-1)/8)*8
			
		end -- end if mcollide left
	
	-- test collision on right
	elseif plyr.dx > 0 then
	
		-- prevent movement through
		-- walls to the right
		if mcollide(plyr,"right",0)
		then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=flr((plyr.x+1)/8)*8
		end -- end if mcollide right
	
	end -- end if plyr.dx </> 0
	
	-- update x,y by the calculated
	-- change (delta x, delta y)
	plyr.x += plyr.dx
	plyr.y += plyr.dy

	-- constrain to left edge
	if plyr.x<0 then 
		plyr.x=0
	end -- end if at map_start

	-- switch to jumping sprite
	if plyr.jumping then 
		plyr.n=6
	end -- end if plyr.jumping

	-- default sprite
	if plyr.landed then 
		plyr.n=1
	end -- end if plyr.landed

end -- end move_plyr()
-->8
-- pickups
function pickups_setup()
	-- run this function in _init()
	
	-- array for active
	-- pickup objects
	pickups={} 
	
	-- sprite numbers
	apple=18
	carrot=19
	meat=20
	
	-- table for pickup locations
	-- needs x,y tile coordinates,
	-- sprite number
	pickups_data=
	{
		-- x,y,sprite
		{6,11,apple},
		{7,11,apple},
		{8,11,apple},
		{10,8,apple},
		{12,7,carrot},
		{14,6,meat},
	}
	
	-- count number of pickups
	num_pickups=count(pickups_data)
	
	-- make each pickup
	for i=1,num_pickups do
	
		-- get the table {x,y,sp}
	 pickup_data=pickups_data[i]
	 
	 -- first item in table is x
	 local x=pickup_data[1]*8
	 -- multiply x,y tile 
	 -- coordinates by 8 to
	 -- get the pixel position
	  
	 -- second item in table is y
	 local y=pickup_data[2]*8
	 -- multiply x,y tile 
	 -- coordinates by 8 to
	 -- get the pixel position
	 
	 -- third item in table is sp
	 local sp=pickup_data[3]
	 
	 -- since this is running in
	 -- a loop, it will make a 
	 -- pickup each time the loop
	 -- executes
	 make_pickup(sp,x,y)
	end -- end for loop
end -- end pickups_setup()

-- make_pickup()   
function make_pickup(n,x,y)
	local pickup={}
	pickup.n=n -- sprite number
	pickup.x=x	-- x pos (px)
	pickup.y=y	-- y pos (px)
	pickup.w=8	-- width (px)
	pickup.h=8	-- height (px)
	
	-- add this pickup to the
	-- table of all active pickups
	add(pickups,pickup)
end -- end make_pickups()

-- update_pickup()   
function update_pickup(pickup)
-- run this function in
-- _update() foreach of pickups 

	-- allow plyr to
	-- collect pickups
 for pickup in all(pickups) do
		if obj_collision
		(pickup,plyr) then
			
			-- remove the pickup from the
			-- table of active pickups
			del(pickups,pickup)
			
			-- play sound
			sfx(0)
			
			-- add to plyr's score
	  score+=10
	  
		end -- end if obj_collision
	end -- end for loop
end -- end update_pickup()

-- draw_pickup()   
function draw_pickup(pickup)
	-- run this function in
	-- _draw() foreach of pickups
	spr
	(
		pickup.n, -- sprite number
		pickup.x, -- x pos
		pickup.y -- y pos
	)
end -- end draw_pickup()
-->8
-- object collison
function obj_collision(a,b)
	-- determine whether two 
	-- objects are intersecting
	
	-- rightmost part of b is
	-- right of leftmost part of a
	if b.x+b.w>=a.x 
	
	-- leftmost part of b is 
	-- left of rightmost part of a
	and b.x<=a.x+a.w
	
	-- lowest part of b is
	-- lower than top of a
	and b.y+b.h>=a.y
	
	-- topmost part of b is 
	-- above lowest part of a
	and b.y<=a.y+a.h 
	
	-- if all conditions are true,
	-- the objects are intersecting
	then
	 return true 
	else
	 return false
	end -- end if/else
end -- end object_collision()
-->8
-- map collision
function mcollide(obj,dir,flag)

	-- this function calculates
	-- the location of the tile
	-- adjacent to the player in
	-- a given direction and
	-- determines whether the
	-- sprite for that tile has
	-- a flag turned on
	
	-- position of tile to left
	if dir == "left" then 
		x1 = obj.x-1
		y1 = obj.y

		x2 = x1
		y2 = obj.y+obj.h-1
		
	-- position of tile to right
	elseif dir == "right" then 
		x1 = obj.x+obj.w
		y1 = obj.y

		x2 = x1 
		y2 = obj.y+obj.h-1
	
	-- position of tile above
	elseif dir == "up" then 
		x1 = obj.x
		y1 = obj.y-1

		x2 = obj.x+obj.w-1 
		y2 = y1 
		
	-- position of tile below
	elseif dir == "down" then 
		x1 = obj.x
		y1 = obj.y+obj.h

		x2 = obj.x+obj.w-1
		y2 = y1
	end -- end if/elseif
	
	-- pass coordinates to
	-- hitbox coordinates
	x1r = x1
	y1r = y1
	x2r = x2
	y2r = y2

	-- get sprite number of
	-- adjacent tile (divide by 8
	-- to convert from pixel
	-- coords to tile coords)
	s1 = mget(flr(x1/8),flr(y1/8)) 
	s2 = mget(flr(x1/8),flr(y2/8))
	s3 = mget(flr(x2/8),flr(y1/8))		
	s4 = mget(flr(x2/8),flr(y2/8)) 

	-- check flag on sprite at
	-- the adjacent points
	has_flag1=fget(s1,flag) 
	has_flag2=fget(s2,flag) 
	has_flag3=fget(s3,flag)
	has_flag4=fget(s4,flag)

	-- if any of those points
	-- represent a tile with
	-- the sprite flag on, there
	-- is collision with that tile
	if has_flag1 or has_flag2 
	or has_flag3 or has_flag4
	then
		return true
	else
		return false
	end -- end if/else

	-- use this function in
	-- move_plyr() -- for example:
	-- if mcollide(plyr,"down",0)
	-- checks for flag 0 below the
	-- player
	
end -- end mcollide()
__gfx__
00000000000000000000000000000000000000000000000000000000009499000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000008800094999900750057000000000000000000000000000000000000000000000000000000000
00700700000008000000080000000800000008000000080000000880990999990576675000000000000000000000000000000000000000000000000000000000
00077000000008800000088000000880000008800000088080008808999999990065560000000000000000000000000000000000000000000000000000000000
00077000000088080000880880008808000088080000808888888888707999990065560000000000000000000000000000000000000000000000000000000000
00700700008888888088888808888888008888c80088888808888880000999990576675000000000000000000000000000000000000000000000000000000000
00000000088888800888888000888880088888c0088888e000800800099999900750057000000000000000000000000000000000000000000000000000000000
00000000808008000008008000800800808008008080080000000000009999000000000000000000000000000000000000000000000000000000000000000000
00000000080000800000000000000000000000000000000000080800000000000000000000000000000000000000000000000000000000000000000000000000
00000000888008880000000000000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880000000000000bb0007777000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008888888800330000000009b0078888700000088000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880083800000009900078788700000880800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888880000099000078888700088888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000888800088888000099000000788870088888e000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000880000080800009900000000777008080080000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aaa000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000aaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbb000000000000000000000000000000005555555544444444000000009999999999999999999999990000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000066666666ffffffff000000009999999999999999999999990000000000000000
000000003333333333333333333333330000000000000000000000000000000066666666ffffffff00000000aaaaaaaaaaaaaaaaaaaaaaaa0000000000000000
0000000034444444444444444444444300000000000000000000000000000000555555554444444400000000a4444444444444444444444a0000000000000000
000000003444444444444444444444430000000000000000000000000000000066666666ffffffff00000000a4444444444444444444444a0000000000000000
000000003444444444444444444444430000000000000000000000000000000066666666ffffffff00000000a4444444444444444444444a0000000000000000
0000000034444444444444444444444300000000000000000000000000000000555555554444444400000000a4444444444444444444444a0000000000000000
0000000034444444444444444444444300000000000000000000000000000000005555000044440000000000a4444444444444444444444a0000000000000000
bbbbbbbb344444444444444444444443bbbbbbbbbbbbbbbb333333330000000000566500004ff40099999999a4444444000000004444444a9999999999999999
bbbbbbbb344444444444444444444443bbbbbbbbbbbbbbbbc33ee33c0000000000566500004ff40099999999a4444444000000004444444a9999999999999999
333333333444444444444444444444433333333333333333cc3333cc0000000000566500004ff400aaaaaaaaa4444444000000004444444aaaaaaaaaaaaaaaaa
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
000000007070707000000000888888884444444334444444cccccccc111111110000000000000000777777777777777777777777000000004444444aa4444444
000000000707070700000000888888884444444334444444cccccccc111111110000000000000000777777777777777777777777000000004444444aa4444444
000000007070707000000000000660004444444334444444cccccccc111111110000000000000000666666666666666666666666000000004444444aa4444444
000000000707070700000000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000007070707000000000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600088888888000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600088888888000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600000066000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
__gff__
0000000000000041410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010100000303000909090000010100010101210000000909800909090000111101010000000005050500090900000000000000000000010100000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000004143000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000006564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000048486564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000484858586564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000004848585858586564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000004142430000005858585858586564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000006552640000005858585858586564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5050505152535050505050505042425153000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525252000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525252000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525252000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100002355023550235502b5502b5502b55000000000002d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00100000260502e050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002d0502d050270502605021050200501b05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001605007050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002073027750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002405020050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200001b7501f7501f7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000500000d7500d750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
