pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- platformer
-- correction illustrated
-- by matthew dimatteo

-- tab 0: game loop
-- tab 1: make player
-- tab 2: move player
-- tab 3: jump function
-- tab 4: check collision ‚¨ÜÔ∏è/‚¨áÔ∏è
-- tab 5: correct x position
-- tab 6: check collision ‚¨ÖÔ∏è/‚û°Ô∏è
-- tab 7: map collision function
-- tab 8: swap sprite function

-- runs once at start
function _init()

	-- map tile flag
	solid=0
	
	-- 8x8px sprite if false
	-- 24x24px sprite if true
	big=false
	make_plyr() -- tab 1
	
	-- physics forces
	grav=0.3
	fric=0.85

	-- coordinates to draw hitbox
	hx1=0
	hy1=0
	hx2=0
	hy2=0
	hsp1=0
	hsp2=0

	-- for troubleshooting clipping
	clipped=false 
	lastclip="" -- tab 1
	
end -- end _init()

-- runs 30x per second
function _update()
	move_plyr() -- tab 2
	set_hitbox() -- tab 7 
	swap_sprite() -- tab 8	
end -- end _update()

-- runs 30x per second
function _draw()
	cls() -- clear screen
	map() -- draw the map
	
	-- draw player
	spr(plyr.n,plyr.x,plyr.y,
	plyr.sw,plyr.sh,plyr.flip)

	-- instructions: z to swap spr
	if big==false then
		print("press z for big plyr sprite",12,2,7)
	elseif big==true then
		print("press z for small plyr sprite",12,2,7)
	end
		
	-- print player pixel and tile position
	print("pixel:  "..flr(plyr.x)..","..flr(plyr.y),12,10,10)
	if plyr.tile_x 
	and plyr.tile_y then
		print("tile:   "..plyr.tile_x..","..plyr.tile_y,12,18,10)
	end -- end if

	-- print left correction
	print("correction",12,34,8)
	print("to left",12,42,8)
	print("x:"..plyr.x,12,50,8)
	print("+ "..fixl,12,58,8)
	print("= "..plyr.x+fixl,12,66,8)
 
	-- print right correction
	print("to right",62,42,8)
	print("x:"..plyr.x,62,50,8)
	print("- "..fixr,62,58,8)
	print("= "..plyr.x-fixr,62,66,8)

	-- last applied correction
	if clipped then 
		print(lastclip,12,74,7)
	end
	
	-- draw collision hitboxes
	rect(hx1,hy1,hx1,hy1,8) 
	rect(hx2,hy2,hx2,hy2,8)

	-- print left collision info
	if mcollide(plyr,"left",solid) then 
		print("collision on left with spr "..hsp2,2,112,7)
	end -- end if mcollide
		
	-- print right collision info
	if mcollide(plyr,"right",solid) then 
		print("collision on right with spr "..hsp2,2,112,7)
	end -- end if mcollide
		
	-- print down collision info
	if mcollide(plyr,"down",solid)
 	and not btn(2)
 	then 
		print("collision below with spr "..hsp1,2,120,7)
	end -- end if map collision
	
	-- print up collision info
	if mcollide(plyr,"up",solid)
	and (plyr.dy < 0 or btn(2))
	then 
		print("collision above with spr "..hsp1,2,120,7)
	end -- end if map collision
	
end -- end _draw()
-->8
-- make player
function make_plyr()
	
	-- create player table
	plyr={} 
	
	-- big sprite (24x24 pixels)
	if big then
	
		plyr.n=10 -- sprite number
		plyr.w=32 -- width in pixels
		plyr.h=32 -- height in pixels
	
	-- small sprite (8x8 pixels)
	else
		plyr.n=1 -- sprite number
		plyr.w=8 -- width in pixels
		plyr.h=8 -- height in pixels
	end -- end if big

 	-- pixel position 
	plyr.x=32
	plyr.y=64 
	
	-- width/height for sprite
	-- function requires a tile
	-- value (8 pixels per tile)	
	plyr.sw=plyr.w/8
	plyr.sh=plyr.h/8

	-- whether to flip the sprite
	-- horizontally
	plyr.flip=false
	
	-- change in x,y
	plyr.dx=0
	plyr.dy=0

	-- speed in x,y directions
	plyr.xspd=0.5
	plyr.yspd=4

	-- whether the player has
	-- landed (this will be set
	-- to true when there is
	-- collision with a map tile
	-- below the player)
	plyr.landed=false
	
end -- end make_plyr()
-->8
-- move player
function move_plyr()
	
	-- dx and dy are used to 
	-- calculate how much the
	-- player will move each frame
	
	-- multiplying dx by a friction
	-- value less than 1 slows it
	plyr.dx*=fric 
	
	-- inc change in y by gravity
	-- to make player fall
	plyr.dy+=grav 
	
	-- the player's x and y values
	-- must be incremented by dx
	-- and dy, respectively, at
	-- the end of this function
	-- in order to move
	
	-- hold left arrow
	if btn(‚¨ÖÔ∏è) then 
	
		-- substract from change in x
		-- to move left
		plyr.dx-=plyr.xspd
		
		-- flip player sprite since
		-- it faces right by default
		plyr.flip=true
		
	end -- end if btn(‚¨ÖÔ∏è)

	-- hold right arrow
	if btn(‚û°Ô∏è) then 
	
		-- add to change in x to
		-- move right
		plyr.dx+=plyr.xspd
		
		-- unflip the sprite in case
		-- the player had been
		-- moving left
		plyr.flip=false
		
	end -- end if btn(‚û°Ô∏è)

	jump() -- tab 3
	check_updown() -- tab 4
	correctx() -- tab 5
	check_leftright() -- tab 6

	-- update x and y positions by
	-- the change calculated
	plyr.x+=plyr.dx
	plyr.y+=plyr.dy
 
	-- keep player on screen
	if plyr.x<0 then 
		plyr.x=0
	end -- end if x<0

end -- end move_plyr()
-->8
-- jump function
function jump()
	-- press up or x to jump
	-- (btnp does not require key
	-- to be held down)
	if (btnp(‚¨ÜÔ∏è) or btnp(‚ùé))
	
	-- w/o the second condition,
	-- the player would be able 
	-- to jump indefinitely
 	and plyr.landed then
 
		-- subtract from change in y
		-- to move up on the screen
		plyr.dy-=plyr.yspd
		
		-- set boolean to false to
		-- prevent double jump
		plyr.landed=false
		
	end -- end if btnp(‚¨ÜÔ∏è/‚ùé)
end -- end function jump()
-->8
-- check collision up/down
function check_updown()
	-- mcollide() function: tab 7
	-- stop falling when touching
	-- a solid tile below player
	if mcollide(plyr,"down",solid)
	and plyr.dy > 0
	then
		plyr.landed=true
		plyr.dy=0 -- stop falling
		
		-- because of vertical speed,
		-- the player can fall a few
		-- px into the floor. this
		-- calculates how many px and
		-- re-adjusts y (credit to 
		-- nerdyteachers.com for this
		-- formula)
		plyr.y-=
		((plyr.y+plyr.h+1)%8)-1

	end -- end if mcollide down
	
	-- stop moving up when there's
	-- collision with a solid tile 
	-- above the player
	if mcollide(plyr,"up",solid)
	and plyr.dy < 0
	then
		plyr.landed=true 
		plyr.dy=0 -- stop jumping
	end -- end if mcollide up
end -- end function check_updown()
-->8
-- correct x position
function correctx()
	-- correct position on left
	-- and right
	fixl=1-((plyr.x+1)%8)
	fixr=((plyr.x+plyr.w+1)%8)-1
	
	-- prevent overcorrection
	if abs(fixl) > 4 then
		fixl1=fixl --precorrection
		fixl = 8-abs(fixl)
		fixl2=fixl -- postcorrection
		
		-- for printing the x position
		-- and correction amount of the
		-- last clip (_draw, tab 0)
		if plyr.x < 8 then 
			clipped=true
			lastclip=plyr.x..","..fixl1..","..fixl2
		end -- end if plyr.x < 8
		
	end -- end if abs(fixl) > 4
end -- end function correctx()
-->8
-- check collision left/right
-- mcollide() function: tab 7
function check_leftright()
	-- collide with solid on left
	if plyr.dx < 0 and
	mcollide(plyr,"left",solid)
	then
		plyr.dx=0 -- stop moving l/r
			
		-- don't get stuck in wall
		plyr.x+=fixl
	end -- end if plyr.dx<0

 	-- collide with solid on right
	if plyr.dx > 0 and
	mcollide(plyr,"right",solid)
	then
		plyr.dx=0 -- stop moving l/r

		-- don't get stuck in wall
		plyr.x-=fixr
	end -- end if plyr.dx>0
end -- end function check_leftright
-->8
-- map collision function
function mcollide(obj,dir,flag)
	
	-- this function checks two
	-- points on the tile adjacent
	-- to the player: hx1,hy1 and
	-- hx2,hy2 -- we can then use
	-- these coordinates to look up
	-- the adjacent tile's sprite
	-- number and whether it has
	-- a flag turned on
	
	-- position of tile to left
	if dir=="left" then 
		hx1=obj.x-1
		hy1=obj.y

		hx2=hx1
		hy2=obj.y+obj.h-1
		
	-- position of tile to right
	elseif dir=="right" then 
		hx1=obj.x+obj.w
		hy1=obj.y

		hx2=hx1 
		hy2=obj.y+obj.h-1
	
	-- position of tile above
	elseif dir=="up" then 
		hx1=obj.x
		hy1=obj.y-1

		hx2=obj.x+obj.w-1 
		hy2=hy1 
		
	-- position of tile below
	elseif dir=="down" then 
		hx1=obj.x
		hy1=obj.y+obj.h

		hx2=obj.x+obj.w-1
		hy2=hy1
	end -- end if/elseif

	-- get sprite number of
	-- adjacent tile (divide by 8
	-- to convert from pixel
	-- coordinate to tile coordinate)
	hsp1=mget(flr(hx1/8),flr(hy1/8)) 
	hsp2=mget(flr(hx2/8),flr(hy2/8)) 

	-- check flag on sprite for 
	-- adjacent tile
	local has_flag1=fget(hsp1,flag) 
	local has_flag2=fget(hsp2,flag) 

	if has_flag1 or has_flag2 then
		return true
	else
		return false
	end -- end if/else

end -- end mcollide()
-- use this function in
-- move_plyr() -- for example:
-- if mcollide(plyr,"down",0)
-- checks for flag 0 below the
-- player

-- this function draws two dots
-- on the tile adjacent to the
-- player, depending on which
-- direction they are moving
function set_hitbox()

	-- position of tile to left
	if btn(‚¨ÖÔ∏è) then 
		hx1=plyr.x-1
		hy1=plyr.y

		hx2=hx1 
		hy2=plyr.y+plyr.h-1
		
	-- position of tile to right
	elseif btn(‚û°Ô∏è) then 
		hx1=plyr.x+plyr.w
		hy1=plyr.y

		hx2=hx1 
		hy2=plyr.y+plyr.h-1
	
	-- position of tile above
	elseif btn(‚¨ÜÔ∏è) or btn(‚ùé) then 
		hx1=plyr.x
		hy1=plyr.y-1

		hx2=plyr.x+plyr.w-1 
		hy2=hy1 
		
	-- position of tile below
	else 
		hx1=plyr.x
		hy1=plyr.y+plyr.h

		hx2=plyr.x+plyr.w-1
		hy2=hy1
	end -- end if/elseif

	-- get sprite number of
	-- adjacent tile (divide by 8
	-- to convert from pixel
	-- coordinate to tile coordinate)
	hsp1=mget(flr(hx1/8),flr(hy1/8)) 
	hsp2=mget(flr(hx2/8),flr(hy2/8)) 

end -- end set_hitbox()
-->8
-- swap sprite function
function swap_sprite()

	-- map and sprite widths
	map_end = 120
	sm_spr = 8
	lg_spr = 32
	
	-- size difference
	diff = lg_spr-sm_spr

	-- press z/c to swap sprite
	if btnp(üÖæÔ∏è) then
	
		-- store player location
		temp_x=plyr.x
		temp_y=plyr.y
		
		-- big to small
		if big==true then
			big = false
			temp_y+=diff -- adjust y pos
	  
		-- small to big
		elseif big==false then
			big=true
			temp_y-=diff -- adjust y pos
	  
			-- right edge correction
			if plyr.x>=map_end-lg_spr
			then
				temp_x-=lg_spr+plyr.x-map_end
			end -- end if x>map_end-lg_spr
	  
		end -- end if big t/f
	 
		-- re-make player to apply
		make_plyr() -- tab 1
	 
		-- adjust player position
		plyr.x=temp_x
		plyr.y=temp_y
	 
	end -- end if btnp(üÖæÔ∏è)

	-- determine tile coordinates
	-- for player position
	-- (tiles are 8x8 pixels)
	plyr.tile_x=flr(plyr.x/8)
	plyr.tile_y=flr(plyr.y/8)
	
end -- end swap_sprite()
__gfx__
00000000006666000000000000000000000000000000000000000000009499000000000000000000000000000000000000000000000000000000000000000000
0000000006aaaa600000000000000000000000000000000000008800094999900750057000000000000000000000000000000000000000000000000000000000
007007006aaaa0a60000080000000800000008000000080000000880990999990576675000000000000000000000000000000000000000000000000000000000
000770006aaaaaa60000088000000880000008800000088080008808999999990065560000000000000000000000000000000000000000000000000000000000
000770006aaaaaa60000880880008808000088080000808888888888707999990065560000000000000000000000000000000000000000000000000000000000
007007006aaaaaa68088888808888888008888c80088888808888880000999990576675000000000000000000000000000000000000000000000000000000000
0000000006aaaa600888888000888880088888c0088888e000800800099999900750057000000000000000000000000000000000000000000000000000000000
00000000006666000008008000800800808008008080080000000000009999000000000000000000000000000000000000000000000000000000000000000000
00000000080000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888008880000000000000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880000000000000bb0007777000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008888888800330000000009b0078888700000088000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880083800000009900078788700000880800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088888800888880000099000078888700088888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000888800088888000099000000788870088888e000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000880000080800009900000000777008080080000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000aa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aaa000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000aaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbb000000000000000000000000000000005555555544444444000000009999999999999999999999990000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000066666666ffffffff000000009999999999999999999999990000000000000000
000000003333333333333333333333330000000000000000000000000000000066666666ffffffff00000000aaaaaaaaaaaaaaaaaaaaaaaa0000000000000000
0000000034444444444444444444444300000000000000000000000000000000555555554444444400000000a4444444444444444444444a0000000000000000
000000003444444444444444444444430000000000000000000000000000000066666666ffffffff00000000a4444444444444444444444a0000000000000000
000000003444444444444444444444430000000000000000000000000000000066666666ffffffff00000000a4444444444444444444444a0000000000000000
0000000034444444444444444444444300000000000000000000000000000000555555554444444400000000a4444444444444444444444a0000000000000000
0000000034444444444444444444444300000000000000000000000000000000005555000044440000000000a4444444444444444444444a0000000000000000
bbbbbbbb344444444444444444444443bbbbbbbbbbbbbbbb333333330000000000566500004ff40099999999a4444444000000004444444a9999999999999999
bbbbbbbb344444444444444444444443bbbbbbbbbbbbbbbbc33ee33c0000000000566500004ff40099999999a4444444000000004444444a9999999999999999
333333333444444444444444444444433333333333333333cc3333cc0000000000566500004ff400aaaaaaaaa4444444000000004444444aaaaaaaaaaaaaaaaa
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
444444444444444444444444444444444444444334444444cccccccc0000000000566500004ff400444444444444444400000000444444444444444aa4444444
000000007070707000000000888888884444444334444444cccccccc111111110000000000000000777777777777777777777777000000004444444aa4444444
000000000707070700000000888888884444444334444444cccccccc111111110000000000000000777777777777777777777777000000004444444aa4444444
000000007070707000000000000660004444444334444444cccccccc111111110000000000000000666666666666666666666666000000004444444aa4444444
000000000707070700000000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000007070707000000000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600088888888000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600088888888000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
000000000006600000066000000660004444444334444444cccccccc111111110000000000000000111111166111111111111111000000004444444aa4444444
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000111111166111111100000000000000000000000000000000
__gff__
0000000000000041410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010100000101000101010000010101010101000000000101800101010000000001010000000001010100010100000000000000000000010100000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000004142425100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6400000000000000000000415152525200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5350424242424242504242515252525200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525252525252525252525252525200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100002355023550235502b5502b5502b55000000000002d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00100000260502e050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002d0502d050270502605021050200501b05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001605007050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002073027750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002405020050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001005010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000