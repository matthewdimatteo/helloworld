pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- sidescrolling platformer
-- pickups example
-- by matthew dimatteo

-- tab 0: game loop
-- tab 1: make player
-- tab 2: move player
-- tab 3: map collision
-- *** tab 4: pickups

-- runs once at start
-- variables, objects
function _init()

	-- physics forces
	fric = 0.85 -- friction
	grav = 0.3 -- gravity

	-- variables for plyr
	make_plyr() -- tab 1
	
	score = 0
end -- /function _init()

-- runs 30x/sec
-- movement, calculation
function _update()
	move_plyr() --  tab 2
	pickup() -- *** tab 4 
end -- /function _update()

-- runs 30x/sec
-- output/graphics
function _draw()
	cls() -- refresh screen
	map() -- draw map

	-- draw player sprite
	spr(plyr.n,plyr.x,plyr.y,plyr.w/8,plyr.h/8,plyr.flip)

	-- *** print score 
	print("rupees: "..score,12,2,0)
end -- /function _draw()
-->8
-- make player
-- call this function in _init()
function make_plyr()
	plyr = {} -- table
	
	plyr.n = 1 -- sprite number

	-- x,y coordinates
	plyr.x = 7.5*8 -- 60 pixels
	plyr.y = 14*8 -- 92 pixels
	
	-- width and height in pixels
	-- needed for map collision
	plyr.w=8
	plyr.h=8
	
	-- base speed
	plyr.xspd=0.5 -- x speed
	plyr.yspd=3 -- y speed
	
	-- active speed
	plyr.dx=0 -- change in x
	plyr.dy=0 -- change in y
	
	-- player state
	plyr.dir = ➡️ -- direction
	plyr.flip =false

	-- number of jumps left
	plyr.basejumps = 2
	plyr.jumps = plyr.basejumps
	
end -- /function make_plyr()
-->8
-- move player
-- call this function in _update()
function move_plyr()
	
	-- apply friction so the plyr
	-- eventually stops moving
	plyr.dx *= fric
	
	-- apply gravity so the plyr
	-- does not float endlessly
	plyr.dy += grav
	
	-- move left
	if btn(⬅️) then
		-- subtract from change in x
		plyr.dx -= plyr.xspd
		
		-- track player's direction
		plyr.dir = ⬅️
		
		-- flip the sprite
		plyr.flip = true
	end -- /if btn(⬅️)
	
	-- move right
	if btn(➡️) then
		-- add to change in x
		plyr.dx += plyr.xspd

		-- track player's direction
		plyr.dir = ➡️
		
		-- un-flip sprite
		plyr.flip = false
	end -- /if btn(⬅️)
	
	-- jump
	if (btnp(⬆️) or btnp(❎))
	and plyr.jumps > 0
	then
		plyr.dy = -plyr.yspd
		plyr.jumps -= 1
	end -- /if btnp(⬆️/❎)
	
	-- test collision below
	if plyr.dy > 0 then
	
		-- stop falling when a solid
		-- tile is below the player
		if mcollide(plyr,⬇️,0)
			then
			plyr.dy = 0
			
			-- reset jump count
			plyr.jumps = plyr.basejumps

			-- correct y position if
			-- fell into ground
			plyr.y -= plyr.y%8
		end -- /if mcollide down
	
	end -- /if plyr.dy < / > 0

	-- test collision on left
	if plyr.dx < 0 then
	
		-- prevent movement through
		-- walls to the left
		if mcollide(plyr,⬅️,0) then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=ceil((plyr.x-1)/8)*8
		end -- /if mcollide left
	
	-- test collision on right
	elseif plyr.dx > 0 then
	
		-- prevent movement through
		-- walls to the right
		if mcollide(plyr,➡️,0) then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=flr((plyr.x+1)/8)*8
			--plyr.x -= plyr.x%8
		end -- /if mcollide right
	
	end -- /if plyr.dx < / > 0
	
	-- update x,y by the calculated
	-- change (delta x, delta y)
	plyr.x += plyr.dx
	plyr.y += plyr.dy
	
end -- /function move_plyr()
-->8
-- map collision

-- call this function in 
-- move_plyr() in an if
-- statement, like this:

-- if mcollide(plyr,⬇️,0) then
-- // run code for what happens
-- // when collision occurs
-- end 
function mcollide(obj,dir,flag)
	
	-- determine location of map
	-- tile relative to player
	-- (depending on direction)
	if dir == ⬅️ then
		x1 = obj.x-1
		y1 = obj.y
		x2 = x1
		y2 = y1+obj.h-1
	elseif dir == ➡️ then
		x1 = obj.x+obj.w
		y1 = obj.y
		x2 = x1
		y2 = y1+obj.h-1
	elseif dir == ⬆️ then
		x1 = obj.x
		y1 = obj.y-1
		x2 = x1+obj.w-1
		y2 = y1
	elseif dir == ⬇️ then
		x1 = obj.x
		y1 = obj.y+obj.h
		x2 = x1+obj.w-1
		y2 = y1
	end -- /if dir
	
	-- find sprite number of
	-- map tile adjacent to plyr
	-- (check 4 points)
	n1=mget(flr(x1/8),flr(y1/8))
	n2=mget(flr(x2/8),flr(y1/8))
	n3=mget(flr(x1/8),flr(y2/8))
	n4=mget(flr(x2/8),flr(y2/8))
	
	-- check for flag on that
	-- sprite (at all 4 points)
	f1=fget(n1,flag)
	f2=fget(n2,flag)
	f3=fget(n3,flag)
	f4=fget(n4,flag)
	
	-- if at least 1 of the 4
	-- points is a sprite with
	-- the flag, then collision
	-- is true; return true/false
	if f1 or f2 or f3 or f4 then
		return true
	else
		return false
	end -- /if f1 or f2 or f3 or f4

end -- /function mcollide()
-->8
-- *** pickups
-- call this function in _update()
function pickup()
	
	-- determine player's x,y
	-- location as a tile value
	local x = flr(plyr.x/8)
	local y = flr(plyr.y/8)
	
	-- account for player's width
	-- when approaching pickup
	-- from the left (plyr dir ➡️)
	if plyr.dir == ➡️
	or plyr.dir == 1 then
		x = flr((plyr.x+plyr.w)/8)
	else
		x = flr(plyr.x/8)
	end -- /if/else plyr.dir == ➡️
	
	-- get sprite number of tile
	-- the player is touching
	local n = mget(x,y)
	
	-- sprite flags for pickups
	green=1
	blue =2
	red  =3
	
	-- check for flag on sprite
	is_green = fget(n,green)
	is_blue  = fget(n,blue)
	is_red   = fget(n,red)
	
	-- background tile spr number
	bg = 33 -- sky tile
	
	-- when player touches pickup,
	-- earn points and 
	-- replace collected tile with
	-- background sprite
	if is_green then
		mset(x,y,bg)
		score += 1
		sfx(0)
	elseif is_blue then
		mset(x,y,bg)
		score += 5
		sfx(1)
	elseif is_red then
		mset(x,y,bg)
		score += 20
		sfx(2)
	end -- /if-elseif is_g/r/b

end -- /function pickup()
__gfx__
0000000000aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700aaaaa5aa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000aaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000aaaaaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700aaaaaeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000044644333000000003333333333333333333333330000000033344644cccbbcccccc11cccccc88ccc000000000000000000000000
00000000000000000000000044443333000000003333333333333333333333330000000033334444ccbbbbcccc1111cccc8888cc000000000000000000000000
0000000000000000000000004e4443330000000033333333333333333333333300000000333444e4ccbbbbcccc1111cccc8888cc000000000000000000000000
00000000000000000000000044433333000000003334343443443434434343330000000033333444cbbbbbbcc111111cc888888c000000000000000000000000
00000000000000000000000044443333000000003346444444443444444464330000000033334444cbbbbbbcc111111cc888888c000000000000000000000000
000000000000000000000000449443330000000033344494449444f4494443330000000033344944ccbbbbcccc1111cccc8888cc000000000000000000000000
00000000000000000000000044443333000000003344e44444444444444e44330000000033334444ccbbbbcccc1111cccc8888cc000000000000000000000000
0000000000000000000000004f4333330000000033444f4444444e4444f4443300000000333334f4cccbbcccccc11cccccc88ccc000000000000000000000000
00000000cccccccccc7777cc44443333333333333344444444444444444444333333333333334444000000000000000000000000000000000000000000000000
00000000ccccccccc777777c44443333333333333346444444444644444444333333333333334444000000000000000000000000000000000000000000000000
00000000cccccccc7777777744e443333333333334444e444494444444e444433333333333344e44000000000000000000000000000000000000000000000000
00000000cccccccc7777777744444444434434344444444444444444444446444344343444444444000000000000000000000000000000000000000000000000
00000000cccccccc7777777744444444444434444444444464444444444444444444344444444444000000000000000000000000000000000000000000000000
00000000ccccccccc777777c44449444449444f44449444444444e4444449444449444f444494444000000000000000000000000000000000000000000000000
00000000cccccccccccccccc4f44444444444444444444f444f444444f44444444444444444444f4000000000000000000000000000000000000000000000000
00000000cccccccccccccccc4444446444444e4446444444444444464444446444444e4446444444000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000001000101010001020408000000000000010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1721212121212121212121212121211521212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212221212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121222121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321222121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
13211c211b211a21211a211b211c211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2316161616161616161616161616162516161616161616161616161616161616161616161616162121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
001000001e05023050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000001f05024050260500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000002205025050280502b05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
