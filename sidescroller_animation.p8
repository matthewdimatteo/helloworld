pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- rider game academy
-- sidescroller template
-- with physics
-- *** animation ***
-- by matthew dimatteo

-- tab 0: game loop
-- tab 1: make player
-- tab 2: move player
-- tab 3: map collision function
-- tab 4: *** animation ***

-- runs once at start
function _init()

	-- physics forces
	fric = 0.85 -- friction
	grav = 0.3 -- gravity

	-- variables for plyr
	make_plyr() -- tab 1

	-- *** animation timer ***
	animtime = 0
	
end -- /function _init()

-- runs 30 times per second
function _update()
	move_plyr() --  tab 2
	animate() -- *** tab 4 ***
end -- /function _update()

-- runs 30 times per second
function _draw()
	cls() -- refresh screen
	map() -- draw map

	-- draw player sprite
	spr(plyr.n,plyr.x,plyr.y,plyr.w/8,plyr.h/8,plyr.flip)

	-- *** print animation timer ***
	print("time()   "..time(),12,2,0)
	print("animtime "..animtime,12,10,0)
	print("spr "..plyr.n,plyr.x-5,plyr.y-10,0)
end -- /function _draw()
-->8
-- make player
-- call in _init()
function make_plyr()
	plyr = {} -- table
	
	plyr.n = 1 -- sprite number
	plyr.x = 3*8 -- 64 pixels
	plyr.y = 14*8 -- 92 pixels
	plyr.w = 8 -- width 8 px
	plyr.h = 8 -- height 8 px
	
	-- base speed
	plyr.xspd=0.5 -- x speed
	plyr.yspd=3 -- y speed
	
	-- active speed
	plyr.dx=0 -- change in x
	plyr.dy=0 -- change in y
	
	-- player state
	plyr.dir = ➡️ -- direction
	plyr.flip =false

	-- number of jumps left
	plyr.basejumps = 2
	plyr.jumps = plyr.basejumps
	
end -- /function make_plyr()
-->8
-- move player function
-- call in _update()
function move_plyr()
	
	-- apply friction so the plyr
	-- eventually stops moving
	plyr.dx *= fric
	
	-- apply gravity so the plyr
	-- does not float endlessly
	plyr.dy += grav
	
	-- move left
	if btn(⬅️) then
		-- subtract from change in x
		plyr.dx -= plyr.xspd
		
		-- track player's direction
		plyr.dir = ⬅️
		
		-- flip the sprite
		plyr.flip = true
	end -- /if btn(⬅️)
	
	-- move right
	if btn(➡️) then
		-- add to change in x
		plyr.dx += plyr.xspd

		-- track player's direction
		plyr.dir = ➡️
		
		-- un-flip sprite
		plyr.flip = false
	end -- /if btn(⬅️)
	
	-- jump
	if (btnp(⬆️) or btnp(❎))
	and plyr.jumps > 0
	then
		plyr.dy = -plyr.yspd
		plyr.jumps -= 1
	end -- /if btnp(⬆️/❎)
	
	-- test collision below
	if plyr.dy > 0 then
	
		-- stop falling when a solid
		-- tile is below the player
		if mcollide(plyr,⬇️,0)
			then
			plyr.dy = 0
			
			-- reset jump count
			plyr.jumps = plyr.basejumps

			-- correct y position if
			-- fell into ground
			plyr.y -= plyr.y%8
		end -- /if mcollide down
	
	end -- /if plyr.dx </> 0

	-- test collision on left
	if plyr.dx < 0 then
	
		-- prevent movement through
		-- walls to the left
		if mcollide(plyr,⬅️,0) then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=ceil((plyr.x-1)/8)*8
		end -- /if mcollide left
	
	-- test collision on right
	elseif plyr.dx > 0 then
	
		-- prevent movement through
		-- walls to the right
		if mcollide(plyr,➡️,0) then
			plyr.dx = 0
		
			-- correct x position to
			-- avoid getting stuck in wall
			plyr.x=flr((plyr.x+1)/8)*8
			--plyr.x -= plyr.x%8
		end -- /if mcollide right
	
	end -- /if plyr.dx </> 0
	
	-- update x,y by the calculated
	-- change (delta x, delta y)
	plyr.x += plyr.dx
	plyr.y += plyr.dy
	
end -- /function move_plyr()
-->8
-- map collision function

-- call in move_plyr() within
-- an if statement, like this:

-- if mcollide(plyr,⬇️,0) then
-- // run code for what happens
-- // when collision is true
-- end
function mcollide(obj,dir,flag)
	
	-- determine location of map
	-- tile relative to player
	-- (depending on direction)
	if dir == ⬅️ then
		x1 = obj.x-1
		y1 = obj.y
		x2 = x1
		y2 = y1+obj.h-1
	elseif dir == ➡️ then
		x1 = obj.x+obj.w
		y1 = obj.y
		x2 = x1
		y2 = y1+obj.h-1
	elseif dir == ⬆️ then
		x1 = obj.x
		y1 = obj.y-1
		x2 = x1+obj.w-1
		y2 = y1
	elseif dir == ⬇️ then
		x1 = obj.x
		y1 = obj.y+obj.h
		x2 = x1+obj.w-1
		y2 = y1
	end -- /if dir
	
	-- find sprite number of
	-- map tile adjacent to plyr
	-- (check 4 points)
	n1=mget(flr(x1/8),flr(y1/8))
	n2=mget(flr(x2/8),flr(y1/8))
	n3=mget(flr(x1/8),flr(y2/8))
	n4=mget(flr(x2/8),flr(y2/8))
	
	-- check for flag on that
	-- sprite (at all 4 points)
	f1=fget(n1,flag)
	f2=fget(n2,flag)
	f3=fget(n3,flag)
	f4=fget(n4,flag)
	
	-- if at least 1 of the 4
	-- points is a sprite with
	-- the flag, then collision
	-- is true; return true/false
	if f1 or f2 or f3 or f4 then
		return true
	else
		return false
	end -- /if f1 or f2 or f3 or f4

end -- /mcollide()
-->8
-- *** animate player sprite ***
function animate()

	-- sprite numbers for anim
	animstart = 1 -- walk cycle
	animend = 6 -- /of cycle
	jumpspr = 17 -- jump sprite

	-- jumping sprite
	if plyr.jumps != plyr.basejumps
	then
		plyr.n = jumpspr
	
	-- run cycle when moving l/r
	elseif btn(⬅️) or btn(➡️) then
	
		-- how often the sprite
		-- should change
		animrate = 0.16
		
		-- change sprite after an
		-- interval of time
		if time()-animtime > animrate
		then
				
			-- reset timer
			animtime=time()
				
			-- go to next sprite
			plyr.n = plyr.n + 1
			
			-- loop back to first frame
			if plyr.n > animend then
				plyr.n = animstart
			end -- /if plyr.n
			
		end -- /if time
		
	-- idle/default sprite
	else
		plyr.n = animstart
	end -- /if/else landed

end -- /function animate()
__gfx__
00000000004444000044440000444400004444000044440000444400000000000000000000000000000000000000000000000000000000000000000000000000
00000000004775000047750000477500004775000047750000477500000000000000000000000000000000000000000000000000000000000000000000000000
00700700004777000047770000477700004777000047770000477700000000000000000000000000000000000000000000000000000000000000000000000000
00077000000770000007707007077000000770700707700000077070000000000000000000000000000000000000000000000000000000000000000000000000
00077000078888700788887007888870078888700788887007888870000000000000000000000000000000000000000000000000000000000000000000000000
00700700000880000708800000088070000880000008807007088000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001001000010010000100100011001000010010000100100000000000000000000000000000000000000000000000000000000000000000000000000
00000000001001000100010001001000000010000100100001000100000000000000000000000000000000000000000000000000000000000000000000000000
00000000004444000000000044644333000000003333333333333333333333330000000033344644000000000000000000000000000000000000000000000000
00000000004775000000000044443333000000003333333333333333333333330000000033334444000000000000000000000000000000000000000000000000
0000000000477700000000004e4443330000000033333333333333333333333300000000333444e4000000000000000000000000000000000000000000000000
00000000070770700000000044433333000000003334343443443434434343330000000033333444000000000000000000000000000000000000000000000000
00000000008888000000000044443333000000003346444444443444444464330000000033334444000000000000000000000000000000000000000000000000
000000000008800000000000449443330000000033344494449444f4494443330000000033344944000000000000000000000000000000000000000000000000
00000000001001000000000044443333000000003344e44444444444444e44330000000033334444000000000000000000000000000000000000000000000000
0000000000000000000000004f4333330000000033444f4444444e4444f4443300000000333334f4000000000000000000000000000000000000000000000000
00000000cccccccccc7777cc44443333333333333344444444444444444444333333333333334444000000000000000000000000000000000000000000000000
00000000ccccccccc777777c44443333333333333346444444444644444444333333333333334444000000000000000000000000000000000000000000000000
00000000cccccccc7777777744e443333333333334444e444494444444e444433333333333344e44000000000000000000000000000000000000000000000000
00000000cccccccc7777777744444444434434344444444444444444444446444344343444444444000000000000000000000000000000000000000000000000
00000000cccccccc7777777744444444444434444444444464444444444444444444344444444444000000000000000000000000000000000000000000000000
00000000ccccccccc777777c44449444449444f44449444444444e4444449444449444f444494444000000000000000000000000000000000000000000000000
00000000cccccccccccccccc4f44444444444444444444f444f444444f44444444444444444444f4000000000000000000000000000000000000000000000000
00000000cccccccccccccccc4444446444444e4446444444444444464444446444444e4446444444000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000001000101010001000000000000000000010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1721212121212121212121212121211521212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212221212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121222121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321222121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1321212121212121212121212121211921212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2316161616161616161616161616162516161616161616161616161616161616161616161616162121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
